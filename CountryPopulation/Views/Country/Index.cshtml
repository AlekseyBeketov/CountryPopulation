@using System.Data
@using Newtonsoft.Json;

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Печать элемента</title>
    <style>
        p{
        font-size:40px;
        margin-top:-15px;
        }

        h2{
            font-weight:700;
        }
        h1{
            font-weight:700;
        }

        @@media print {
            html, .container {
                height: 500mm;
                width: 210mm;
            }

            .header, .footer, .col-md-2, .navbar {
                display: none;
            }

            .pokaz {
                page-break-inside: avoid;
                page-break-after: avoid;
            }

            .row {
                margin-left:-150px;
            }

            .text-center,h1 {
                width:210mm;
                text-align:center;
                margin-left:150px;
            }




            p{
                width:350px;  
                text-align: center;
            }

            h2{
                display:flex;
            }
            h1{
                margin-top:30px;
            }

            .wrapper {
                width: auto;
                margin: 0;
                padding: 0;
            }

        }

        page {
            margin: 10mm 10mm 10mm 20mm;
        }
    </style>
    <!-- Подключение библиотек для графика -->
</head>
<div class="container">
    <div class="row">
        <div class="col-md-10 mx-auto" style="margin-top: 20px">
            <h1 class="text-center">График численности населения</h1>
            <div class="mb-3">
                <canvas id="populationChart"></canvas>
            </div>
        </div>
        <div class="col-md-2 mx-auto" style="margin-top: 20px">
            <h1 class="text-center" style="width: 250px">Фильтры</h1>
            <br>

            <form asp-action="Index" method="post" id="countryForm" style="width: 250px; height:542px">
                <div class="mb-3">
                    <label for="listcountries">По странам</label>
                    <input class="form-control" type="text" id="listcountries" name="listcountries" value="Austria" readonly>
                </div>
                <div class="mb-3">
                    <select class="form-select" aria-label="Пример выбора по умолчанию" id="countrySelect" name="selectedCountry" multiple style="height: 160px">
                        @foreach (DataRow row in Model.Rows)
                        {
                            <option value="@row["Country"]">@row["Country"]</option>
                        }
                    </select>
                </div>
                <div class="btn-group" role="group">
                    <button type="button" id="addCountryButton" class="btn btn-primary">Добавить</button>
                    <button type="button" id="removeCountryButton" class="btn btn-danger">Удалить</button>
                </div>
                <div class="mt-3">
                    <label for="typeSelect">По типу графика</label>
                    <select id="typeSelect" class="form-select" name="selectedType">
                        <option value="line">Линейный график</option>
                        <option value="bar">Столбчатая диаграмма</option>
                    </select>
                </div>
                <label for="DateRange" class="me-2" style="margin-top: 12px">По годам</label>
                <div class="mt-3 d-flex justify-content-end" style="width: 258px; margin-top: -10px">
                    <div id="DateRange" class="d-flex align-items-center" style="margin-top: -16px">
                        <div class="me-2">
                            <input class="form-control" type="number" id="firstDate" name="firstDate" value="@ViewBag.firstDate" placeholder="от">
                        </div>
                        <div class="me-2">
                            <input class="form-control" type="number" id="secondDate" name="secondDate" value="@ViewBag.secondDate" placeholder="до">
                        </div>
                    </div>
                </div>
                <div class="mt-3 d-flex justify-content-end">
                    <button type="submit" id="uploadButton" class="btn btn-success flex-grow-1">Применить</button>
                </div>
                <div class="mt-3 d-flex justify-content-end">
                    <button onclick="printChart()" class="btn btn-secondary flex-grow-1" style="margin-top:-10px">Печать графика</button>
                </div>



            </form>
            <div class="mt-3 d-flex">
                <form asp-action="AddData"  method="post" id="dataForm" enctype="multipart/form-data">
                    <input type="hidden" id="dataTableJson" name="dataTableJson" value="" />
                    <input type="hidden" id="firstDate" name="firstDate" value="@ViewBag.firstDate" />
                    <input type="hidden" id="secondDate" name="secondDate" value="@ViewBag.secondDate" />
                    <input type="hidden" id="Select" name="Select" value="@string.Join(",", ViewBag.Select)" />

                    <button type="button" class="btn btn-dark" style="margin-top:-10px; width: 250px" onclick="submitForm()">Загрузить отчет</button>
                </form>
            </div>

        </div>
        <input type="hidden" id="dataTableJson" name="dataTableJson" value="@Html.Raw(JsonConvert.SerializeObject(Model))" />




        <div class="col-md-12 mx-auto">
            <h1 class="zagolovok" style="margin-bottom:15px">Средние показатели динамического ряда</h1>
            @{
                int jjjj = 0;
                int countData = 0;
                int joja = 0;
                string vyvod = "";
            } 

            @for (int i = 0; i < ViewBag.Select.Count; i++)
            {

                <h2 class="pok">@Html.Raw(ViewBag.Select[i])</h2>

                double sum = 0;
                int first = 0;
                int last= 0;

                double sumFirst = 0;
                double sumLast = 0;
                double avgAbsoluteInc = 0;
                double avgLevel = 0;

                @foreach (DataRow row in Model.Rows)
                {
                    if (row["Country"].ToString() == @ViewBag.Select[i])
                    {
                        string lastColumnName = row.Table.Columns[row.Table.Columns.Count - 1].ColumnName;
                        int lastYear = Convert.ToInt32(lastColumnName);
                        if (jjjj == 0)
                        {
                            countData = row.Table.Columns.Count - 2;
                        }
                        else
                        {
                            lastColumnName = row.Table.Columns[countData].ColumnName;
                            lastYear = Convert.ToInt32(lastColumnName);
                        }
                        int diff = @ViewBag.secondDate - lastYear;
                        if (diff <= 0)
                        {
                            diff = 10;
                        }
                        
                        jjjj++;
                        int iii = 0;
                        int jjj = 0;
                        while (iii < diff)
                        {
                            lastYear++;
                            countData++;
                            joja++;
                            sum = 0; sumFirst = 0; sumLast = 0;

                            try
                            {
                                sum += (Convert.ToDouble(row[1]) + Convert.ToDouble(row[countData])) / 2;
                            }
                            catch (InvalidCastException)
                            {
                                countData = countData - joja - 1;
                                sum += (Convert.ToDouble(row[1]) + Convert.ToDouble(row[countData])) / 2;
                                joja = 0;
                            }
                        
                            first = Convert.ToInt32(row[1]); 
                            last = Convert.ToInt32(row[countData]); 
                            for (int j = 2; j < countData; j++)
                            {
                                sum += Convert.ToInt64(row[j]);
                            }
                            avgLevel = 0;
                            avgLevel = sum / (countData - 1);
                            avgAbsoluteInc = 0;
                            avgAbsoluteInc = (last - first) / countData; 

                            double a = (double)last / first;
                            double b = 1.0 / countData;
                            double avgRateOfGrowth = Math.Pow(a, b) * 100;
                            vyvod = $"{Math.Round(avgRateOfGrowth, 2)}%";

                            // ПРОГНОЗИРОВАНИЕ
                            if (countData % 2 == 0)
                            {
                                for (int j = 2; j < (countData / 2); j++)
                                {
                                    sumFirst += Convert.ToInt64(row[j]);
                                }
                                sumFirst += (Convert.ToDouble(row[1]) + Convert.ToDouble(row[countData / 2])) / 2;

                                for (int j = countData / 2 + 2; j < countData; j++)
                                {
                                    sumLast += Convert.ToInt64(row[j]);
                                }
                                sumLast += (Convert.ToDouble(row[countData / 2 + 1]) + Convert.ToDouble(row[countData])) / 2;
                            }
                            else
                            {
                                for (int j = 2; j < countData / 2; j++)
                                {
                                    sumFirst += Convert.ToInt64(row[j]);
                                }
                                int index = countData / 2;
                                double aa = Convert.ToDouble(row[1]);
                                double bb = Convert.ToDouble(row[index]);
                                sumFirst += (aa+bb) / 2;

                                for (int j = index+1; j < countData; j++)
                                {
                                    sumLast += Convert.ToInt64(row[j]);
                                }
                                sumLast += (Convert.ToDouble(row[index]) + Convert.ToDouble(row[countData])) / 2;
                            }
                            double avg1 = sumFirst / (countData / 2 - 1);
                            double avg2 = sumLast / (countData / 2 - 1);
                            double threshold = 0.2; // 20%
                            double difference = Math.Abs(avg2 - avg1);
                            double tolerance = Math.Max(avg1, avg2) * threshold;

                            double predictHigh = 0;
                            double predictLow = 0;

                            if (difference > tolerance) // Нестационарный ряд
                            {
                                double[] masPredict = PredictEasy(lastYear, @ViewBag.secondDate, Convert.ToDouble(row[countData]), avgAbsoluteInc);
                                for (int jj = 0; jj < masPredict.Length; jj++)
                                {
                                    if (!row.Table.Columns.Contains((lastYear).ToString()))
                                    {
                                        row.Table.Columns.Add((lastYear).ToString(), typeof(double));
                                    }
                                    row[(lastYear).ToString()] = masPredict[jj];
                                    lastYear++;
                                }
                                iii = diff;
                            }
                            else // Стационарный ряд
                            {
                                // Проверка гипотезы о равенстве дисперсий

                                double dispUP1 = 0;
                                double dispUP2 = 0;
                                int del = countData / 2;
                                if (countData % 2 != 0)
                                {
                                    del++;
                                }
                                for (int j = 1; j < del+1; j++)
                                {
                                    double bim = Convert.ToDouble(row[j]) - avg1;
                                    dispUP1 += bim * bim;
                                }
                                if (countData % 2 == 0)
                                {
                                    for (int j = del + 1; j < countData + 1; j++)
                                    {
                                        double bom = Convert.ToDouble(row[j]) - avg2;
                                        dispUP2 += bom * bom;
                                    }
                                }
                                else
                                {
                                    for (int j = del; j < countData + 1; j++)
                                    {
                                        double bom = Convert.ToDouble(row[j]) - avg2;
                                        dispUP2 += bom * bom;
                                    }
                                }

                                double dispersion1 = dispUP1 / (del-1);
                                double dispersion2 = dispUP2 / (del-1);

                                double Fisher = dispersion1 / dispersion2;
                                double[] FisherMas = {
                                    161.45, 19.00, 9.28, 6.39, 5.05, 4.28, 3.79, 3.44, 3.18, 2.98,
                                    2.82, 2.69, 2.58, 2.49, 2.42, 2.35, 2.29, 2.24, 2.19, 2.15,
                                    2.12, 2.09, 2.06, 2.03, 2.01, 1.99, 1.97, 1.95, 1.93, 1.91,
                                    1.90, 1.89, 1.87, 1.86, 1.85, 1.84, 1.83, 1.82, 1.81, 1.80,
                                    1.79, 1.78, 1.77, 1.76, 1.75, 1.74, 1.73, 1.72, 1.71, 1.70,
                                    1.69, 1.68, 1.67, 1.66, 1.65, 1.64, 1.63, 1.62, 1.61, 1.60,
                                    1.59, 1.58, 1.57, 1.56, 1.55, 1.54, 1.53, 1.52, 1.51, 1.50,
                                    1.49, 1.48, 1.47, 1.46, 1.45, 1.44, 1.43, 1.42, 1.41, 1.40,
                                    1.39, 1.38, 1.37, 1.36, 1.35, 1.34, 1.33, 1.32, 1.31, 1.30,
                                    1.29, 1.28, 1.27, 1.26, 1.25, 1.24, 1.23, 1.22, 1.21, 1.20,
                                    1.19, 1.18, 1.17, 1.16, 1.15, 1.14, 1.13, 1.12, 1.11, 1.10,
                                    1.09, 1.08, 1.07, 1.06, 1.05, 1.04, 1.03, 1.02, 1.01, 1.00
                                    };
                                double t = 0;
                                if (Fisher < FisherMas[del - 2]) // Гипотеза о равенстве принимается
                                {
                                    // Различие дисперсий можно признать незначительным
                                    double avgOtklon = Math.Sqrt((dispersion1 * (del - 1) + dispersion2 * (del - 1)) / (del + del - 2));
                                    double tDown = avgOtklon * Math.Sqrt((2 / Convert.ToDouble(del)));

                                    var (sum1, sum2) = CalculateSums(row, del, countData);
                                    t = (Math.Abs(sum1 - sum2)) / tDown;

                                    if (t < FisherMas[del - 3]) // Различие незначительное => ряд стационарный
                                    {
                                        if (countData - 1 > FisherMas.Length)
                                        {
                                            predictHigh = avgLevel + 1 * avgOtklon * Math.Sqrt(1 + 1 / countData);
                                            predictLow = avgLevel - 1 * avgOtklon * Math.Sqrt(1 + 1 / countData);
                                        }
                                        else
                                        {
                                            predictHigh = avgLevel + FisherMas[countData - 1] * avgOtklon * Math.Sqrt(1 + 1 / countData);
                                            predictLow = avgLevel - FisherMas[countData - 1] * avgOtklon * Math.Sqrt(1 + 1 / countData);
                                        }
                                        double predict = (predictHigh + predictLow) / 2;

                                        // Добавление нового столбца, если он еще не существует
                                        if (!row.Table.Columns.Contains((lastYear).ToString()))
                                        {
                                            row.Table.Columns.Add((lastYear).ToString(), typeof(double));
                                        }
                                        // Запись значения predict в новый столбец
                                        row[(lastYear).ToString()] = Convert.ToInt32(predict);
                                        iii++;
                                        jjj++;
                                    }
                                    else //Гипотеза о стационарности ряда не принимается, дисперсии отличаются значимо
                                    {
                                        double[] masPredict = PredictEasy(lastYear, @ViewBag.secondDate, Convert.ToDouble(row[countData]), avgAbsoluteInc);
                                        for (int jj = 0; jj < masPredict.Length; jj++)
                                        {
                                            if (!row.Table.Columns.Contains((lastYear).ToString()))
                                            {
                                                row.Table.Columns.Add((lastYear).ToString(), typeof(double));
                                            }
                                            row[(lastYear).ToString()] = masPredict[jj];
                                            
                                            lastYear++;

                                        }
                                        iii = diff;
                                    }
                                }
                                else // Дисперсии отличаются значимо и гипотеза о стационарности ряда не принимается
                                {
                                    double[] masPredict = PredictEasy(lastYear, @ViewBag.secondDate, Convert.ToDouble(row[countData]), avgAbsoluteInc);
                                    for (int jj = 0; jj < masPredict.Length; jj++)
                                    {
                                        if (!row.Table.Columns.Contains((lastYear).ToString()))
                                        {
                                            row.Table.Columns.Add((lastYear).ToString(), typeof(double));
                                        }
                                        row[(lastYear).ToString()] = masPredict[jj];
                                        lastYear++;
                                    }
                                    iii = diff;
                                }
                            }
                        }


                        // countData = row.Table.Columns.Count - 1;
                        break; 
                    }
                    
                }

                @functions {
                // Метод для сумм
                private (double sum1, double sum2) CalculateSums(System.Data.DataRow row, int del, int countData)
                {
                    double sum1 = 0, sum2 = 0;
                    for (int j = 1; j < del + 1; j++)
                    {
                        sum1 += Convert.ToDouble(row[j]);
                    }
                    if (countData % 2 == 0)
                    {
                        for (int j = del+1; j < countData + 1; j++)
                        {
                            sum2 += Convert.ToDouble(row[j]);
                        }
                    }
                    else
                    {
                        for (int j = del; j < countData + 1; j++)
                        {
                            sum2 += Convert.ToDouble(row[j]);
                        }
                    }
                    sum1 /= del;
                    sum2 /= del;
                    return (sum1, sum2);
                }

                private double[] PredictEasy(int firstDate, int lastDate, double lastValue, double avgAbsoluteInc)
                {
                    int diff = lastDate - firstDate+1;
                    if (diff <= 0)
                    {
                        diff = 10;
                    }
                    double[] masEasy = new double[diff];
                    double s = lastValue;
                    for (int i = 0; i < diff; i++)
                    {
                        s += avgAbsoluteInc;
                        masEasy[i] = s;
                    }
                    return masEasy;
                }
            }


                <div class="pokaz">

                    <div class="d-flex justify-content-between">
                        <div class="d-flex flex-column align-items-center">
                            <h4>Средний уровень ряда</h4>
                            <p>@Math.Round(avgLevel, 2)</p>
                        </div>
                        <div class="d-flex flex-column align-items-center">
                            <h4>Средний абсолютный прирост</h4>
                            <p>@Math.Round(avgAbsoluteInc, 2)</p>
                        </div>
                        <div class="d-flex flex-column align-items-center">
                            <h4>Средний темп роста</h4>
                            <p>@vyvod</p>
                        </div>
                    </div>
                </div>

            }
        </div>
        @*
        <!-- Таблица под графиком -->
        <div class="row">
            <div class="col-md-12 mx-auto" style="margin-top:20px">
                <h2 class="text-center">Динамика объема численности населения</h2>
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Год</th>
                                @foreach (DataColumn column in Model.Rows[0].Table.Columns)
                                {
                                    if (column.Ordinal > 0)
                                    {
                                        var yearValue = column.ColumnName; // Получаем значение ячейки в текущей колонке
                                        if (Convert.ToInt64(yearValue) >= @ViewBag.firstDate && Convert.ToInt64(yearValue) <= @ViewBag.secondDate)
                                        {
                                            <th>@yearValue</th>
                                        }
                                    }
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @*

                            
                            @for (var i = 0; i < ViewBag.Years.Count; i++)
                            {
                                <tr>
                                    <td>@ViewBag.Years[i]</td>
                                    @foreach (var country in ViewBag.Select)
                                    {
                                        <td>@ViewBag.Data[country][i]</td>
                                    }
                                </tr>
                            }
                            
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        *@
    </div>
</div>



@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.5.0-beta4/html2canvas.min.js"></script>
    <script>
        var ctx = document.getElementById('populationChart').getContext('2d');

        document.getElementById('addCountryButton').addEventListener('click', function () {
            var selectedOptions = Array.from(document.getElementById('countrySelect').selectedOptions).map(option => option.value);
            var countryField = document.getElementById('listcountries');
            var currentCountries = countryField.value.trim(); // Получаем текущее значение и удаляем начальные и конечные пробелы

            // Если в поле нет никаких стран, просто присваиваем значение первой выбранной страны
            if (currentCountries === '') {
                countryField.value = selectedOptions[0];
            } else {
                // Если в поле уже есть страны, добавляем запятую и пробел перед добавлением новой страны
                selectedOptions.forEach(option => {
                    if (!currentCountries.includes(option)) {
                        currentCountries += ', ' + option;
                    }
                });
                countryField.value = currentCountries;
            }
        });


        document.getElementById('removeCountryButton').addEventListener('click', function () {
            var selectedOptions = Array.from(document.getElementById('countrySelect').selectedOptions).map(option => option.value);
            var countryField = document.getElementById('listcountries');
            var currentCountries = countryField.value.split(',').map(country => country.trim());

            selectedOptions.forEach(option => {
                var index = currentCountries.indexOf(option);
                if (index !== -1) {
                    currentCountries.splice(index, 1);
                }
            });

            countryField.value = currentCountries.join(', ');
        });

        document.getElementById('uploadButton').addEventListener('click', function () {
            var countriesString = document.getElementById('listcountries').value;
            var countriesArray = countriesString.split(', '); // Разделяем строку на элементы
            var form = document.getElementById('countryForm');
            for (var i = 0; i < countriesArray.length; i++) {
                var input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'selectedCountries';
                input.value = countriesArray[i];
                form.appendChild(input);
            }

            var firstDate = document.getElementById('firstDate').value;
            var secondDate = document.getElementById('secondDate').value;
            form.submit(); // Отправляем форму
        });



        // Функция для обновления данных чарта при изменении выбранной страны
        document.getElementById('countrySelect').addEventListener('change', function () {
            selectedCountry = this.value;
            myChart.update();
        });

        // Функция для обновления типа диаграммы при нажатии кнопки
        document.getElementById('typeSelect').addEventListener('click', function () {
            var selectedValue = document.getElementById('typeSelect').value;
            updateChartType(selectedValue);
        });

        // Функция для обновления типа диаграммы
        function updateChartType(selectedValue) {
            myChart.config.type = selectedValue;
            myChart.update();
        }

        // Получаем года из первой строки таблицы, начиная со второго столбца
        var years = [
        @foreach (DataColumn column in Model.Rows[0].Table.Columns)
        {
            if (column.Ordinal > 0)
            {
                var yearValue = Convert.ToInt64(column.ColumnName); // Получаем значение ячейки в текущей колонке
                if (yearValue >= ViewBag.firstDate && yearValue <= ViewBag.secondDate)
                {
                    @Html.Raw($"\"{column.ColumnName}\",")
                }
            }
        }
                ];
        
        var labelname = 'Population of '
        var colors = [
            'rgba(255, 99, 132, 0.2)',   // Красный
            'rgba(54, 162, 235, 0.2)',   // Синий
            'rgba(255, 206, 86, 0.2)',   // Желтый
            'rgba(75, 192, 192, 0.2)',   // Зеленый
            'rgba(153, 102, 255, 0.2)',  // Фиолетовый
            'rgba(255, 159, 64, 0.2)',   // Оранжевый
            'rgba(201, 203, 207, 0.2)',  // Серый
            'rgba(255, 99, 71, 0.2)',    // Томато
            'rgba(123, 104, 238, 0.2)',  // Средне-фиолетовый
            'rgba(0, 255, 127, 0.2)',    // Весенний зеленый
            'rgba(255, 20, 147, 0.2)',   // Розовый
            'rgba(72, 61, 139, 0.2)',    // Темный фиолетовый
            'rgba(0, 191, 255, 0.2)',    // Глубокий небесный синий
            'rgba(32, 178, 170, 0.2)',   // Светлый морской зеленый
            'rgba(100, 149, 237, 0.2)',  // Васильковый
            'rgba(220, 20, 60, 0.2)',    // Малиновый
            'rgba(255, 105, 180, 0.2)',  // Горячий розовый
            'rgba(30, 144, 255, 0.2)',   // Ультрамариновый
            'rgba(50, 205, 50, 0.2)',    // Лаймовый зеленый
            'rgba(233, 150, 122, 0.2)'   // Темно-лососевый
        ];

        var borderColors = [
            'rgba(255, 99, 132, 1)',     // Красный
            'rgba(54, 162, 235, 1)',     // Синий
            'rgba(255, 206, 86, 1)',     // Желтый
            'rgba(75, 192, 192, 1)',     // Зеленый
            'rgba(153, 102, 255, 1)',    // Фиолетовый
            'rgba(255, 159, 64, 1)',     // Оранжевый
            'rgba(201, 203, 207, 1)',    // Серый
            'rgba(255, 99, 71, 1)',      // Томато
            'rgba(123, 104, 238, 1)',    // Средне-фиолетовый
            'rgba(0, 255, 127, 1)',      // Весенний зеленый
            'rgba(255, 20, 147, 1)',     // Розовый
            'rgba(72, 61, 139, 1)',      // Темный фиолетовый
            'rgba(0, 191, 255, 1)',      // Глубокий небесный синий
            'rgba(32, 178, 170, 1)',     // Светлый морской зеленый
            'rgba(100, 149, 237, 1)',    // Васильковый
            'rgba(220, 20, 60, 1)',      // Малиновый
            'rgba(255, 105, 180, 1)',    // Горячий розовый
            'rgba(30, 144, 255, 1)',     // Ультрамариновый
            'rgba(50, 205, 50, 1)',      // Лаймовый зеленый
            'rgba(233, 150, 122, 1)'     // Темно-лососевый
        ];

var myChart = new Chart(ctx, {
    type: 'line',
    data: {
        labels: years, // Года на оси X
        datasets: [
            @for (int i = 0; i < ViewBag.Select.Count; i++)
            {
                <text>
                {
                    label: 'Population of @Html.Raw(ViewBag.Select[i])',
                    data: [
                        @foreach (DataRow row in Model.Rows)
                        {
                            if (row["Country"].ToString() == @ViewBag.Select[i]) // Замените "Германия" на выбранную страну или используйте переменную
                            {
                                for (int j = @ViewBag.firstDate-1989; j < @ViewBag.secondDate-1988; j++)
                                {
                                    @Html.Raw($"\"{row[j]}\",")
                                }
                                break; // Прерываем цикл после получения данных для выбранной страны
                            }
                        }
                    ],
                            backgroundColor: colors[@i % colors.length],
                            borderColor: borderColors[@i % borderColors.length],
                            borderWidth: 1
                },
                </text>
            }
        ]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});
        function printChart() {
            window.print(); 
        }

        function submitForm() {
            document.getElementById('dataTableJson').value = JSON.stringify(@Html.Raw(JsonConvert.SerializeObject(Model)));
            document.getElementById('dataForm').submit();
        }

    </script>
}


